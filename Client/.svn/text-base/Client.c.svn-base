/*
 * This file was generated automatically by ExtUtils::ParseXS version 3.18 from the
 * contents of Client.xs. Do not edit this file, edit Client.xs instead.
 *
 *    ANY CHANGES MADE HERE WILL BE LOST!
 *
 */

#line 1 "Client.xs"
#include <stdbool.h>
#include "EXTERN.h"
#include "perl.h"
#include "XSUB.h"

#include <xmlrpc-c/base.h>
#include <xmlrpc-c/util.h>
#include <xmlrpc-c/client.h>

static void
returnCreateData(xmlrpc_env      const env,
                 xmlrpc_client * const clientP,
                 SV *            const execObjR,
                 SV *            const errorRetR) {

    if (SvROK(errorRetR)) {
        SV * const errorRet = SvRV(errorRetR);

        if (env.fault_occurred)
            sv_setpv(errorRet, env.fault_string);
        else
            sv_setsv(errorRet, &PL_sv_undef);
    }

    if (!env.fault_occurred) {
        SV * const execObj      = SvRV(execObjR);
    
        sv_setuv(execObj, (unsigned long)clientP);
    }
}



static void
returnCallData(xmlrpc_env     const env,
               xmlrpc_value * const resultP,
               SV *           const resultR,
               SV *           const errorRetR) {

    if (SvROK(errorRetR)) {
        SV * const errorRet = SvRV(errorRetR);

        if (env.fault_occurred)
            sv_setpv(errorRet, env.fault_string);
        else
            sv_setsv(errorRet, &PL_sv_undef);
    }

    if (!env.fault_occurred) {
        SV * const result = SvRV(resultR);
    
        sv_setuv(result, (unsigned long)resultP);
    }
}



static void
returnCallXmlData(xmlrpc_env         const env,
                  xmlrpc_mem_block * const xmlP,
                  SV *               const xmlR,
                  SV *               const errorRetR) {

    if (SvROK(errorRetR)) {
        SV * const errorRet = SvRV(errorRetR);

        if (env.fault_occurred)
            sv_setpv(errorRet, env.fault_string);
        else
            sv_setsv(errorRet, &PL_sv_undef);
    }

    if (!env.fault_occurred) {
        SV * const xml = SvRV(xmlR);

        xmlrpc_env env;

        xmlrpc_env_init(&env);

        XMLRPC_TYPED_MEM_BLOCK_APPEND(char, &env, xmlP, "\0", 1);

        sv_setpv(xml, XMLRPC_TYPED_MEM_BLOCK_CONTENTS(char, xmlP));

        xmlrpc_env_clean(&env);
    }
}



#line 100 "Client.c"
#ifndef PERL_UNUSED_VAR
#  define PERL_UNUSED_VAR(var) if (0) var = var
#endif

#ifndef dVAR
#  define dVAR		dNOOP
#endif


/* This stuff is not part of the API! You have been warned. */
#ifndef PERL_VERSION_DECIMAL
#  define PERL_VERSION_DECIMAL(r,v,s) (r*1000000 + v*1000 + s)
#endif
#ifndef PERL_DECIMAL_VERSION
#  define PERL_DECIMAL_VERSION \
	  PERL_VERSION_DECIMAL(PERL_REVISION,PERL_VERSION,PERL_SUBVERSION)
#endif
#ifndef PERL_VERSION_GE
#  define PERL_VERSION_GE(r,v,s) \
	  (PERL_DECIMAL_VERSION >= PERL_VERSION_DECIMAL(r,v,s))
#endif
#ifndef PERL_VERSION_LE
#  define PERL_VERSION_LE(r,v,s) \
	  (PERL_DECIMAL_VERSION <= PERL_VERSION_DECIMAL(r,v,s))
#endif

/* XS_INTERNAL is the explicit static-linkage variant of the default
 * XS macro.
 *
 * XS_EXTERNAL is the same as XS_INTERNAL except it does not include
 * "STATIC", ie. it exports XSUB symbols. You probably don't want that
 * for anything but the BOOT XSUB.
 *
 * See XSUB.h in core!
 */


/* TODO: This might be compatible further back than 5.10.0. */
#if PERL_VERSION_GE(5, 10, 0) && PERL_VERSION_LE(5, 15, 1)
#  undef XS_EXTERNAL
#  undef XS_INTERNAL
#  if defined(__CYGWIN__) && defined(USE_DYNAMIC_LOADING)
#    define XS_EXTERNAL(name) __declspec(dllexport) XSPROTO(name)
#    define XS_INTERNAL(name) STATIC XSPROTO(name)
#  endif
#  if defined(__SYMBIAN32__)
#    define XS_EXTERNAL(name) EXPORT_C XSPROTO(name)
#    define XS_INTERNAL(name) EXPORT_C STATIC XSPROTO(name)
#  endif
#  ifndef XS_EXTERNAL
#    if defined(HASATTRIBUTE_UNUSED) && !defined(__cplusplus)
#      define XS_EXTERNAL(name) void name(pTHX_ CV* cv __attribute__unused__)
#      define XS_INTERNAL(name) STATIC void name(pTHX_ CV* cv __attribute__unused__)
#    else
#      ifdef __cplusplus
#        define XS_EXTERNAL(name) extern "C" XSPROTO(name)
#        define XS_INTERNAL(name) static XSPROTO(name)
#      else
#        define XS_EXTERNAL(name) XSPROTO(name)
#        define XS_INTERNAL(name) STATIC XSPROTO(name)
#      endif
#    endif
#  endif
#endif

/* perl >= 5.10.0 && perl <= 5.15.1 */


/* The XS_EXTERNAL macro is used for functions that must not be static
 * like the boot XSUB of a module. If perl didn't have an XS_EXTERNAL
 * macro defined, the best we can do is assume XS is the same.
 * Dito for XS_INTERNAL.
 */
#ifndef XS_EXTERNAL
#  define XS_EXTERNAL(name) XS(name)
#endif
#ifndef XS_INTERNAL
#  define XS_INTERNAL(name) XS(name)
#endif

/* Now, finally, after all this mess, we want an ExtUtils::ParseXS
 * internal macro that we're free to redefine for varying linkage due
 * to the EXPORT_XSUB_SYMBOLS XS keyword. This is internal, use
 * XS_EXTERNAL(name) or XS_INTERNAL(name) in your code if you need to!
 */

#undef XS_EUPXS
#if defined(PERL_EUPXS_ALWAYS_EXPORT)
#  define XS_EUPXS(name) XS_EXTERNAL(name)
#else
   /* default to internal */
#  define XS_EUPXS(name) XS_INTERNAL(name)
#endif

#ifndef PERL_ARGS_ASSERT_CROAK_XS_USAGE
#define PERL_ARGS_ASSERT_CROAK_XS_USAGE assert(cv); assert(params)

/* prototype to pass -Wmissing-prototypes */
STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params);

STATIC void
S_croak_xs_usage(pTHX_ const CV *const cv, const char *const params)
{
    const GV *const gv = CvGV(cv);

    PERL_ARGS_ASSERT_CROAK_XS_USAGE;

    if (gv) {
        const char *const gvname = GvNAME(gv);
        const HV *const stash = GvSTASH(gv);
        const char *const hvname = stash ? HvNAME(stash) : NULL;

        if (hvname)
            Perl_croak(aTHX_ "Usage: %s::%s(%s)", hvname, gvname, params);
        else
            Perl_croak(aTHX_ "Usage: %s(%s)", gvname, params);
    } else {
        /* Pants. I don't think that it should be possible to get here. */
        Perl_croak(aTHX_ "Usage: CODE(0x%"UVxf")(%s)", PTR2UV(cv), params);
    }
}
#undef  PERL_ARGS_ASSERT_CROAK_XS_USAGE

#ifdef PERL_IMPLICIT_CONTEXT
#define croak_xs_usage(a,b)    S_croak_xs_usage(aTHX_ a,b)
#else
#define croak_xs_usage        S_croak_xs_usage
#endif

#endif

/* NOTE: the prototype of newXSproto() is different in versions of perls,
 * so we define a portable version of newXSproto()
 */
#ifdef newXS_flags
#define newXSproto_portable(name, c_impl, file, proto) newXS_flags(name, c_impl, file, proto, 0)
#else
#define newXSproto_portable(name, c_impl, file, proto) (PL_Sv=(SV*)newXS(name, c_impl, file), sv_setpv(PL_Sv, proto), (CV*)PL_Sv)
#endif /* !defined(newXS_flags) */

#line 242 "Client.c"

XS_EUPXS(XS_RPC__Xmlrpc_c__Client__client_setup_global_const); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_RPC__Xmlrpc_c__Client__client_setup_global_const)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "errorRetR");
    {
	SV *	errorRetR = ST(0)
;
#line 101 "Client.xs"
    {
        if (!SvROK(errorRetR))
            XSRETURN_EMPTY;
        else {
            SV * const errorRet = SvRV(errorRetR);

            xmlrpc_env env;

            xmlrpc_env_init(&env);

            xmlrpc_client_setup_global_const(&env);

            if (env.fault_occurred)
                sv_setpv(errorRet, env.fault_string);
            else
                sv_setsv(errorRet, &PL_sv_undef);

            xmlrpc_env_clean(&env);
        }
    }
#line 274 "Client.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientCreate); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientCreate)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "_transportOps, _transport, execObjR, errorRetR");
    {
	unsigned long	_transportOps = (unsigned long)SvUV(ST(0))
;
	unsigned long	_transport = (unsigned long)SvUV(ST(1))
;
	SV *	execObjR = ST(2)
;
	SV *	errorRetR = ST(3)
;
#line 132 "Client.xs"
    {
        xmlrpc_client * clientP;
        xmlrpc_env env;

        xmlrpc_env_init(&env);

        if (!SvROK(execObjR))
            xmlrpc_faultf(&env,
                          "executable object argument is not a reference");

        if (!env.fault_occurred) {
            struct xmlrpc_client_transport_ops * const transportOpsP =
                (struct xmlrpc_client_transport_ops *) _transportOps;
            struct xmlrpc_client_transport * const transportP =
                (struct xmlrpc_client_transport *) _transport;

            struct xmlrpc_clientparms clientParms;

            clientParms.transport          = NULL;
            clientParms.transportparmsP    = NULL;
            clientParms.transportparm_size = 0;
            clientParms.transportOpsP      = transportOpsP;
            clientParms.transportP         = transportP;

            xmlrpc_client_create(&env, 0, "", "",
                                 &clientParms, XMLRPC_CPSIZE(transportP),
                                 &clientP);
        }
        returnCreateData(env, clientP, execObjR, errorRetR);

        xmlrpc_env_clean(&env);
    }
#line 328 "Client.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientDestroy); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientDestroy)
{
    dVAR; dXSARGS;
    if (items != 1)
       croak_xs_usage(cv,  "_client");
    {
	unsigned long	_client = (unsigned long)SvUV(ST(0))
;
#line 171 "Client.xs"
    {
        xmlrpc_client * const clientP = (xmlrpc_client *)_client;
        xmlrpc_client_destroy(clientP);
    }
#line 348 "Client.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientCall); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_RPC__Xmlrpc_c__Client__clientCall)
{
    dVAR; dXSARGS;
    if (items != 6)
       croak_xs_usage(cv,  "_client, serverUrl, methodName, _paramArray, resultR, errorRetR");
    {
	unsigned long	_client = (unsigned long)SvUV(ST(0))
;
	const char *	serverUrl = (const char *)SvPV_nolen(ST(1))
;
	const char *	methodName = (const char *)SvPV_nolen(ST(2))
;
	unsigned long	_paramArray = (unsigned long)SvUV(ST(3))
;
	SV *	resultR = ST(4)
;
	SV *	errorRetR = ST(5)
;
#line 188 "Client.xs"
    {
        xmlrpc_client * const clientP      = (xmlrpc_client *)_client;
        xmlrpc_value *  const paramArrayP  = (xmlrpc_value *)_paramArray;
        xmlrpc_value * resultP;

        xmlrpc_server_info * serverInfoP;
        xmlrpc_env env;

        XMLRPC_ASSERT_ARRAY_OK(paramArrayP);

        xmlrpc_env_init(&env);

        serverInfoP = xmlrpc_server_info_new(&env, serverUrl);

        if (!env.fault_occurred) {
            xmlrpc_client_call2(&env, clientP, serverInfoP, methodName,
                                paramArrayP, &resultP);

            xmlrpc_server_info_free(serverInfoP);
        }

        returnCallData(env, resultP, resultR, errorRetR);

        xmlrpc_env_clean(&env);
    }
#line 399 "Client.c"
    }
    XSRETURN_EMPTY;
}


XS_EUPXS(XS_RPC__Xmlrpc_c__Client__callXml); /* prototype to pass -Wmissing-prototypes */
XS_EUPXS(XS_RPC__Xmlrpc_c__Client__callXml)
{
    dVAR; dXSARGS;
    if (items != 4)
       croak_xs_usage(cv,  "methodName, _paramArray, xmlR, errorRetR");
    {
	const char *	methodName = (const char *)SvPV_nolen(ST(0))
;
	unsigned long	_paramArray = (unsigned long)SvUV(ST(1))
;
	SV *	xmlR = ST(2)
;
	SV *	errorRetR = ST(3)
;
#line 225 "Client.xs"
    {
        xmlrpc_value *  const paramArrayP  = (xmlrpc_value *)_paramArray;

        xmlrpc_env env;

        xmlrpc_mem_block output;

        XMLRPC_ASSERT_ARRAY_OK(paramArrayP);

        xmlrpc_env_init(&env);

        XMLRPC_TYPED_MEM_BLOCK_INIT(char, &env, &output, 0);

        xmlrpc_serialize_call(&env, &output, methodName, paramArrayP);

        returnCallXmlData(env, &output, xmlR, errorRetR);

        XMLRPC_TYPED_MEM_BLOCK_CLEAN(char, &output);  

        xmlrpc_env_clean(&env);
    }
#line 442 "Client.c"
    }
    XSRETURN_EMPTY;
}

#ifdef __cplusplus
extern "C"
#endif
XS_EXTERNAL(boot_RPC__Xmlrpc_c__Client); /* prototype to pass -Wmissing-prototypes */
XS_EXTERNAL(boot_RPC__Xmlrpc_c__Client)
{
    dVAR; dXSARGS;
#if (PERL_REVISION == 5 && PERL_VERSION < 9)
    char* file = __FILE__;
#else
    const char* file = __FILE__;
#endif

    PERL_UNUSED_VAR(cv); /* -W */
    PERL_UNUSED_VAR(items); /* -W */
#ifdef XS_APIVERSION_BOOTCHECK
    XS_APIVERSION_BOOTCHECK;
#endif
    XS_VERSION_BOOTCHECK;

        (void)newXSproto_portable("RPC::Xmlrpc_c::Client::_client_setup_global_const", XS_RPC__Xmlrpc_c__Client__client_setup_global_const, file, "$");
        (void)newXSproto_portable("RPC::Xmlrpc_c::Client::_clientCreate", XS_RPC__Xmlrpc_c__Client__clientCreate, file, "$$$$");
        (void)newXSproto_portable("RPC::Xmlrpc_c::Client::_clientDestroy", XS_RPC__Xmlrpc_c__Client__clientDestroy, file, "$");
        (void)newXSproto_portable("RPC::Xmlrpc_c::Client::_clientCall", XS_RPC__Xmlrpc_c__Client__clientCall, file, "$$$$$$");
        (void)newXSproto_portable("RPC::Xmlrpc_c::Client::_callXml", XS_RPC__Xmlrpc_c__Client__callXml, file, "$$$$");
#if (PERL_REVISION == 5 && PERL_VERSION >= 9)
  if (PL_unitcheckav)
       call_list(PL_scopestack_ix, PL_unitcheckav);
#endif
    XSRETURN_YES;
}

